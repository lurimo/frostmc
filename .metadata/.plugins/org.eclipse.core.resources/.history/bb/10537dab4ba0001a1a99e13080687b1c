package br.com.frostmc.login.scoreboard;

import org.bukkit.Bukkit;
import org.bukkit.craftbukkit.v1_7_R4.entity.CraftPlayer;
import org.bukkit.entity.Player;
import org.bukkit.scoreboard.DisplaySlot;
import org.bukkit.scoreboard.Objective;
import org.bukkit.scoreboard.Scoreboard;
import org.bukkit.scoreboard.Team;
import org.spigotmc.ProtocolInjector;
import org.spigotmc.ProtocolInjector.PacketTabHeader;

import br.com.frostmc.common.BukkitMain;
import br.com.frostmc.common.util.gamer.Gamer;
import br.com.frostmc.core.data.mysql.bukkit.AccountBukkit;
import br.com.frostmc.core.util.Strings;
import br.com.frostmc.core.util.enums.AuthType;
import br.com.frostmc.core.util.enums.GroupsType;
import br.com.frostmc.core.util.enums.LeagueType;
import br.com.frostmc.login.FrostLogin;
import net.minecraft.server.v1_7_R4.ChatSerializer;
import net.minecraft.server.v1_7_R4.IChatBaseComponent;

public class Scoreboarding {
	
	public static String title = "§b§lLOGIN";
	public static int integer = 0;
	
	public static String next() {
		integer++;
		if (integer == 0) {
			title = "§b§lL§f§lOGIN";
		}
		if (integer == 1) {
			title = "§3§lL§b§lO§f§lGIN";
		}
		if (integer == 2) {
			title = "§3§lLO§b§lG§f§lIN";
		}
		if (integer == 3) {
			title = "§3§lLOG§b§lI§f§lN";
		}
		if (integer == 4) {
			title = "§3§lLOGI§b§lN";
		}
		if (integer == 5) {
			title = "§3§lLOGIN";
		}
		
		if (integer == 6) {
			title = "§b§lL§3§lOGIN";
		}
		if (integer == 7) {
			title = "§f§lL§b§lO§3§lGIN";
		}
		if (integer == 8) {
			title = "§f§lLO§b§lG§3§lIN";
		}
		if (integer == 9) {
			title = "§f§lLOG§b§lI§3§lN";
		}
		if (integer == 10) {
			title = "§f§lLOGI§b§lN";
		}
		if (integer == 11) {
			title = "§f§lLOGIN";
			integer = 0;
		}
		return title;
	}
	
	public static String getTitle() {
		return title;
	}
	
	public static void setScoreboard(Player player) {
		if (FrostLogin.scoreboard.contains(player.getUniqueId())) {
			sendScoreboard(player);
		}
		setTab(player);
	}
	
	public static void setTab(Player player) {
		AccountBukkit account = new AccountBukkit(player);
		Gamer gamer = BukkitMain.getGamerManager().getGamer(player);
		GroupsType groups = BukkitMain.getPermissionManager().getPlayerGroup(player);
		LeagueType league = gamer.getLeagueType();
		int xp = gamer.getXp();
		String clan = (account.getClan().getGroupClan().getClan() == null ? "N/A" : account.getClan().getStatusClan().getClanName());
		sendTab(player, "\n" + Strings.server + "\n" + "\n" + "   §fVocê está conectado ao §3§lLOGIN§f." + "\n" + "\\n", "        §fGrupo: " + groups.fullName() + "§8| §fLiga: " + league.fullName() + " §8| §fXP: §9" + xp + " §8| §fClan: §b" + clan + "\n" + "§fTwitter: §3" + Strings.getTwitter() + " §8| §fDiscord: §3" + Strings.getDiscord() + " §8| §fSite: §3" + Strings.getWebsite() + "\n" + "\n" + "§fAdquira VIPS ou DOUBLE XP acessando §a" + Strings.getWebstore());
	}
	
	public static void updateTittle(Player player) {
		if (player == null) {
			return;
		}
		if (player.getScoreboard() == null) {
			return;
		}
		if (!player.isOnline()) {
			return;
		}
		if (!FrostLogin.scoreboard.contains(player.getUniqueId())) {
			return;
		}
		Objective obj = player.getScoreboard().getObjective("score");
		obj.setDisplayName(getTitle());
	}
	
	public static String getMod(String name) {
        if (name.length() == 16) {
            String shorts = name.substring(0, name.length() - 4);
            return shorts;
        }
        if (name.length() == 15) {
            String shorts = name.substring(0, name.length() - 3);
            return shorts;
        }
        if (name.length() == 14) {
            String shorts = name.substring(0, name.length() - 2);
            return shorts;
        }
        if (name.length() == 13) {
            String shorts = name.substring(0, name.length() - 1);
            return shorts;
        }
        return name;
    }
	
	public static String getTimerFormat(int timer) {
		int a = timer / 60, b = timer % 60;
		String c = null;
		String d = null;
		if (a >= 10) {
			c = "" + a;
		} else {
			c = "0" + a;
		}
		if (b >= 10) {
			d = "" + b;
		} else {
			d = "0" + b;
		}
		return c + ":" + d;
	}
	
	public static void sendScoreboard(Player player) {
		Scoreboard sb = Bukkit.getScoreboardManager().getNewScoreboard();
	    Objective obj = sb.registerNewObjective("score", "dummy");
	    obj.setDisplayName(getTitle());
	    obj.setDisplaySlot(DisplaySlot.SIDEBAR);
	    
	    makeScore("§1", null, null, null, sb, 4);
	    if (FrostLogin.checkToLogin.containsKey(player.getUniqueId())) {
	    	if (FrostLogin.checkToLogin.get(player.getUniqueId()).equals(AuthType.NONREGISTERED)) {
		    	makeScore(" §fSua conta", "message1", " §fnão está", null, sb, 3);
		 	    makeScore(" §fregis", "message2", "§ftrada!", null, sb, 2);
		    } else if (FrostLogin.checkToLogin.get(player.getUniqueId()).equals(AuthType.NONLOGGED)) {
		    	makeScore(" §fVocê não", "message1", " §fpossui uma", null, sb, 3);
		    	makeScore(" §fsessão no", "message2", " §fservidor.", null, sb, 2);
		    } else if (FrostLogin.checkToLogin.get(player.getUniqueId()).equals(AuthType.LOGGED)) {
		    	makeScore(" §fSua conta", "message1", " §ffoi", null, sb, 3);
		    	makeScore(" §floga", "message2", "§fda.", null, sb, 2);
		    }
	    }
	    makeScore("§0", null, null, null, sb, 1);
		makeScore("§3www.redefrost", "site", "§3.com.br", null, sb, 0);
		player.setScoreboard(sb);
		return;
	}
	
	public static void removeScoreboard(Player player) {
		player.getScoreboard().clearSlot(DisplaySlot.SIDEBAR);
	}
	
	private static FastOfflinePlayer getFastOfflinePlayer(String string, String teamname, String suffix, String prefix, Scoreboard sb) {
		FastOfflinePlayer fast = new FastOfflinePlayer(string);
		if (teamname != null) {
			Team team = null;
			if (sb.getTeam(teamname)==null) {
				team = sb.registerNewTeam(teamname);
			} else {
				team = sb.getTeam(teamname);
			}
			if (suffix != null) {
				team.setSuffix(suffix);
			}
			if (prefix != null) {
				team.setPrefix(prefix);
			}
			team.addPlayer(fast);
		}
		return fast;
	}
	
	@SuppressWarnings("deprecation")
	private static void makeScore(String string, String teamname, String suffix, String prefix, Scoreboard sb, int integer) {
		Objective obj = null;
		if (sb.getObjective("score") == null) {
			obj = sb.registerNewObjective("score", "dummy");
		} else {
			obj = sb.getObjective("score");
		}
		obj.getScore(getFastOfflinePlayer(string, teamname, suffix, prefix, sb)).setScore(integer);
	}
	
	public static void sendTab(Player p, String cima, String baixo) {
		if (((CraftPlayer) p).getHandle().playerConnection.networkManager.getVersion() < 46) {
			return;
		}
		IChatBaseComponent tabcima = ChatSerializer.a("{\"text\": \"" + cima + "\"}");
		IChatBaseComponent tabbaixo = ChatSerializer.a("{\"text\": \"" + baixo + "\"}");
		PacketTabHeader packet = new ProtocolInjector.PacketTabHeader(tabcima, tabbaixo);
		((CraftPlayer) p).getHandle().playerConnection.sendPacket(packet);
	}

}
